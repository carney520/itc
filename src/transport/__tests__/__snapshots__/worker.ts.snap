// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`test worker peer flows after constructor match source snapshot 1`] = `"data:text/javascript;base64,CiAgICAoZnVuY3Rpb24od2luZG93KXsKICAgICAgKGZ1bmN0aW9uIHdvcmtlclNvdXJjZShldmVudHMsIHNjb3BlKSB7CiAgICB2YXIgSXRjV29ya2VySW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHsKICAgICAgICBmdW5jdGlvbiBJdGNXb3JrZXJJbXBsKHNjb3BlKSB7CiAgICAgICAgICAgIHRoaXMucG9ydHMgPSBbXTsKICAgICAgICAgICAgdGhpcy51aWQgPSAwOwogICAgICAgICAgICB0aGlzLnNjb3BlID0gc2NvcGU7CiAgICAgICAgICAgIHRoaXMubGlzdGVuKCk7CiAgICAgICAgICAgIHRoaXMuaGVhcnRiZWF0KCk7CiAgICAgICAgfQogICAgICAgIEl0Y1dvcmtlckltcGwucHJvdG90eXBlLmNoZWNrTWFzdGVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAodGhpcy5tYXN0ZXIgPT0gbnVsbCAmJiB0aGlzLnBvcnRzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdGhpcy5tYXN0ZXIgPSB0aGlzLnBvcnRzWzBdOwogICAgICAgICAgICAgICAgdGhpcy5tYXN0ZXIucG9zdE1lc3NhZ2UoeyB0eXBlOiBldmVudHMuQkVDT01FX01BU1RFUiB9KTsKICAgICAgICAgICAgICAgIHRoaXMuYnJvYWRjYXN0KHsgdHlwZTogZXZlbnRzLlVQREFURV9NQVNURVIsIGRhdGE6IHsgaWQ6IHRoaXMubWFzdGVyLmlkLCBuYW1lOiB0aGlzLm1hc3Rlci5uYW1lIH0gfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIEl0Y1dvcmtlckltcGwucHJvdG90eXBlLnJlbW92ZVBvcnQgPSBmdW5jdGlvbiAocG9ydCkgewogICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLnBvcnRzLmluZGV4T2YocG9ydCk7CiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHsKICAgICAgICAgICAgICAgIHRoaXMucG9ydHMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAodGhpcy5tYXN0ZXIgPT09IHBvcnQpIHsKICAgICAgICAgICAgICAgIHRoaXMubWFzdGVyID0gdW5kZWZpbmVkOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMudXBkYXRlUGVlcigpOwogICAgICAgICAgICB0aGlzLmNoZWNrTWFzdGVyKCk7CiAgICAgICAgfTsKICAgICAgICBJdGNXb3JrZXJJbXBsLnByb3RvdHlwZS5nZXRQZWVycyA9IGZ1bmN0aW9uIChwb3J0KSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnBvcnRzLmZpbHRlcihmdW5jdGlvbiAocCkgeyByZXR1cm4gcC5pZCAhPT0gcG9ydC5pZDsgfSkubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiAoeyBpZDogcC5pZCwgbmFtZTogcC5uYW1lIH0pOyB9KTsKICAgICAgICB9OwogICAgICAgIC8qKgogICAgICAgICAqIHN5bmMgcGVlcnMKICAgICAgICAgKi8KICAgICAgICBJdGNXb3JrZXJJbXBsLnByb3RvdHlwZS51cGRhdGVQZWVyID0gZnVuY3Rpb24gKGN1cnJlbnRQb3J0KSB7CiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgICAgICAgIHRoaXMucG9ydHMKICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAgIT09IGN1cnJlbnRQb3J0OyB9KQogICAgICAgICAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHBvcnQpIHsKICAgICAgICAgICAgICAgIHZhciBwZWVycyA9IF90aGlzLmdldFBlZXJzKHBvcnQpOwogICAgICAgICAgICAgICAgcG9ydC5wb3N0TWVzc2FnZSh7IHR5cGU6IGV2ZW50cy5VUERBVEVfUEVFUlMsIGRhdGE6IHBlZXJzIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICAgIEl0Y1dvcmtlckltcGwucHJvdG90eXBlLmJyb2FkY2FzdCA9IGZ1bmN0aW9uIChkYXRhLCBzb3VyY2UpIHsKICAgICAgICAgICAgdGhpcy5wb3J0cy5maWx0ZXIoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAgIT09IHNvdXJjZTsgfSkuZm9yRWFjaChmdW5jdGlvbiAocG9ydCkgeyByZXR1cm4gcG9ydC5wb3N0TWVzc2FnZShkYXRhKTsgfSk7CiAgICAgICAgfTsKICAgICAgICBJdGNXb3JrZXJJbXBsLnByb3RvdHlwZS5wb3N0TWVzc2FnZSA9IGZ1bmN0aW9uIChkYXRhLCBzb3VyY2UpIHsKICAgICAgICAgICAgaWYgKGRhdGEudGFyZ2V0ID09IG51bGwgfHwgZGF0YS50YXJnZXQgPT09ICcqJykgewogICAgICAgICAgICAgICAgdGhpcy5icm9hZGNhc3QoZGF0YSwgc291cmNlKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoZGF0YS50YXJnZXQgPT09IC0xKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIGlkeCA9IHRoaXMucG9ydHMuZmluZEluZGV4KGZ1bmN0aW9uIChpKSB7IHJldHVybiBpLmlkID09PSBkYXRhLnRhcmdldDsgfSk7CiAgICAgICAgICAgIGlmIChpZHggIT09IC0xKSB7CiAgICAgICAgICAgICAgICB0aGlzLnBvcnRzW2lkeF0ucG9zdE1lc3NhZ2UoZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIEl0Y1dvcmtlckltcGwucHJvdG90eXBlLmhlYXJ0YmVhdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgaSA9IF90aGlzLnBvcnRzLmxlbmd0aDsKICAgICAgICAgICAgICAgIHdoaWxlIChpLS0pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcG9ydCA9IF90aGlzLnBvcnRzW2ldOwogICAgICAgICAgICAgICAgICAgIGlmIChwb3J0Lnpvb21iaWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlUG9ydChwb3J0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQuem9vbWJpZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQucG9zdE1lc3NhZ2UoeyB0eXBlOiBldmVudHMuUElORyB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBfdGhpcy5oZWFydGJlYXQoKTsKICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICB9OwogICAgICAgIEl0Y1dvcmtlckltcGwucHJvdG90eXBlLmxpc3RlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgICAgICAgdGhpcy5zY29wZS5hZGRFdmVudExpc3RlbmVyKCdjb25uZWN0JywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICB2YXIgcG9ydCA9IGV2ZW50LnBvcnRzWzBdOwogICAgICAgICAgICAgICAgcG9ydC5pZCA9IF90aGlzLnVpZCsrOwogICAgICAgICAgICAgICAgcG9ydC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICAgICAgICAgIC8vIHJlY29ubmVjdAogICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5wb3J0cy5pbmRleE9mKHBvcnQpID09PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5wb3J0cy5wdXNoKHBvcnQpOwogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5jaGVja01hc3RlcigpOwogICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy51cGRhdGVQZWVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvcmNlIHVwZGF0ZSBtYXN0ZXIKICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBwb3J0LmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZXZlbnRzLlVQREFURV9NQVNURVIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGlkOiBfdGhpcy5tYXN0ZXIuaWQsIG5hbWU6IF90aGlzLm1hc3Rlci5uYW1lIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGV2dC5kYXRhOwogICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZXZlbnRzLlBPTkc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3J0Lnpvb21iaWUgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGV2ZW50cy5NRVNTQUdFOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yd2FyZCB0byBvdGhlciBwb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucG9zdE1lc3NhZ2UobWVzc2FnZSwgcG9ydCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBldmVudHMuREVTVFJPWToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZVBvcnQocG9ydCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBldmVudHMuSU5JVElBTDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lXzEgPSBtZXNzYWdlLmRhdGEubmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQubmFtZSA9IG5hbWVfMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnVwZGF0ZVBlZXIocG9ydCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvcndhcmQgdG8gb3RoZXIgcG9ydHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnBvc3RNZXNzYWdlKG1lc3NhZ2UsIHBvcnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfdGhpcy5wb3J0cy5wdXNoKHBvcnQpOwogICAgICAgICAgICAgICAgcG9ydC5zdGFydCgpOwogICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRNYXN0ZXIgPSBfdGhpcy5tYXN0ZXIgfHwgcG9ydDsKICAgICAgICAgICAgICAgIHZhciBpbml0aWFsU3RhdGUgPSB7CiAgICAgICAgICAgICAgICAgICAgaWQ6IHBvcnQuaWQsCiAgICAgICAgICAgICAgICAgICAgcGVlcnM6IF90aGlzLmdldFBlZXJzKHBvcnQpLAogICAgICAgICAgICAgICAgICAgIG1hc3RlcjogeyBuYW1lOiBjdXJyZW50TWFzdGVyLm5hbWUsIGlkOiBjdXJyZW50TWFzdGVyLmlkIH0sCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgcG9ydC5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogZXZlbnRzLkNPTk5FQ1RFRCwKICAgICAgICAgICAgICAgICAgICBkYXRhOiBpbml0aWFsU3RhdGUsCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIF90aGlzLmNoZWNrTWFzdGVyKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CiAgICAgICAgcmV0dXJuIEl0Y1dvcmtlckltcGw7CiAgICB9KCkpOwogICAgcmV0dXJuIG5ldyBJdGNXb3JrZXJJbXBsKHNjb3BlKTsKfSkoeyJDT05ORUNURUQiOiJDT05ORUNURUQiLCJJTklUSUFMIjoiSU5JVElBTCIsIlBPTkciOiJQT05HIiwiUElORyI6IlBJTkciLCJCRUNPTUVfTUFTVEVSIjoiQkVDT01FX01BU1RFUiIsIkRFU1RST1kiOiJERVNUUk9ZIiwiTUVTU0FHRSI6Ik1FU1NBR0UiLCJVUERBVEVfUEVFUlMiOiJVUERBVEVfUEVFUlMiLCJVUERBVEVfTUFTVEVSIjoiVVBEQVRFX01BU1RFUiIsIkNBTEwiOiJDQUxMIiwiQ0FMTF9SRVNQT05TRSI6IkNBTExfUkVTUE9OU0UifSwgd2luZG93KTsKICAgIH0pKHRoaXMpCiAgICA="`;
